#!/bin/sh
#
# recfixdate - normalize date fields in GNU recutils records with GNU date
#
# Usage: recfixdate [OPTION]... [FILE]
#
# Copyright (C) 2023 Jeff Singer.
# License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
# This is free software: you are free to change and redistribute it.
# There is NO WARRANTY, to the extent permitted by law.

set -e

VERSION="1.0.0"
PROGNAME=$(basename "$0")

usage() {
    cat <<EOF >&2
Usage: $PROGNAME [OPTION]... [FILE]
Normalize dates in rec files.

Options:
  -h, --help     display this help and exit
  -v, --version  output version information and exit
  -i, --in-place edit files in place

If no FILE is specified, read standard input and write to standard output.
EOF
    exit 0
}

version() {
    echo "$PROGNAME $VERSION"
    exit 0
}

error() {
    printf "%s: error: %s\n" "$PROGNAME" "$1" >&2
    exit 1
}

get_awk_script() {
    cat <<'AWK_SCRIPT'

function normalize_date(date_parts, format_spec) {
    command = "date -d \"" date_parts "\" +\"" format_spec "\" 2>&1"
    command | getline result
    close(command)
    return (result ~ /invalid/) ? "" : result
}

function after_colon() {
    result = substr($0, index($0, ":") + 2)
    gsub(/[ \t]+$/, "", result)
    return result
}

BEGIN {
    default_format = ENVIRON["RECFIXDATE_FORMAT"]
}

$1 == "%rec:" {
    record_type = $2
    format_spec = default_format
    delete date_field_names
    num_date_fields = 0
}

record_type != "" && $1 == "%type:" && $3 == "date" {
    date_field_names[++num_date_fields] = $2
    print
    next
}

record_type != "" && $1 == "%dateTypeFormat:" {
    format_spec = after_colon()
    print
    next
}

{
    matched = 0
    if ($2 != "") {
        for (i = 1; i <= num_date_fields; i++) {
            if ($1 == (date_field_names[i] ":")) {
                date_parts = after_colon()
                normalized_date = normalize_date(date_parts, format_spec)

                if (normalized_date == "") {
                    errors[NR] = date_parts
                }

                print $1, (normalized_date == "" ? date_parts : normalized_date)
                matched = 1
                break
            }
        }
    }
    if (!matched) { print }
}

END {
    if (length(errors) > 0) {
        print "---\nThe following dates could not be normalized:" > "/dev/stderr"
        for (line_num in errors) {
            printf("- at line %d: '%s'\n", line_num, errors[line_num]) > "/dev/stderr"
        }
    }
}

AWK_SCRIPT
}

run_awk() {
    local input="$1"
    local output="$2"
    awk "$(get_awk_script)" "${input:+"$input"}" >"$output"
}

# Process a file or stdin
process_input() {
    local input="$1"
    local in_place="$2"

    if [ "$in_place" = "true" ]; then
        if [ ! -w "$input" ]; then
            error "file not writable: $input"
        fi

        # Create temporary file in the same directory as the input file
        local tmp_dir
        tmp_dir=$(dirname "$input")
        local tmp_file
        tmp_file=$(mktemp "${tmp_dir}/.${PROGNAME}.XXXXXX") || error "failed to create temporary file"

        # Ensure temporary file is removed on exit or error
        trap 'rm -f "$tmp_file"' EXIT

        # Copy original file permissions to temp file before processing
        if ! cp -p "$input" "$tmp_file"; then
            rm -f "$tmp_file"
            error "failed to copy permissions from: $input"
        fi

        # Empty the temp file while preserving its permissions
        : > "$tmp_file"

        # Process the input to the temporary file
        if ! run_awk "$input" "$tmp_file"; then
            rm -f "$tmp_file"
            error "processing failed for: $input"
        fi

        if ! mv -f "$tmp_file" "$input"; then
            rm -f "$tmp_file"
            error "failed to move temporary file to: $input"
        fi
    else
        run_awk "$input" /dev/stdout
    fi
}

main() {
    local in_place=false
    
    # Parse command line options
    while [ $# -gt 0 ]; do
        case $1 in
            -h|--help)
                usage
                ;;
            -v|--version)
                version
                ;;
            -i|--in-place)
                in_place=true
                shift
                ;;
            -*)
                error "unknown option: $1"
                ;;
            *)
                break
                ;;
        esac
    done
    
    # Check for required awk
    if ! command -v awk >/dev/null 2>&1; then
        error "awk is required but not found"
    fi
    
    if [ $# -eq 0 ]; then
        if [ "$in_place" = "true" ]; then
            error "option --in-place requires file arguments"
        fi
        process_input "-" false
    else
        for file in "$@"; do
            if [ ! -f "$file" ]; then
                error "no such file: $file"
            fi
            if [ ! -r "$file" ]; then
                error "file not readable: $file"
            fi
            process_input "$file" "$in_place"
        done
    fi
}

main "$@"
